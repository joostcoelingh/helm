apiVersion: v1
items:
- apiVersion: v1
  data:
    conf.json: |
      {
          "api": "https://{{ .Values.taiga.hosts }}/api/v1/",
          "eventsUrl": "wss://{{ .Values.taiga.hosts }}/events",
          "eventsMaxMissedHeartbeats": 5,
          "eventsHeartbeatIntervalTime": 60000,
          "eventsReconnectTryInterval": 10000,
          "debug": true,
          "debugInfo": false,
          "defaultLanguage": "en",
          "themes": ["taiga"],
          "defaultTheme": "taiga",
          "publicRegisterEnabled": false,
          "gravatar": true,
          "feedbackEnabled": false,
          "privacyPolicyUrl": null,
          "termsOfServiceUrl": null,
          "maxUploadFileSize": null,
          "tribeHost": null,
          "importers": []
      }
  kind: ConfigMap
  metadata:
    name: taigaconfig
    app: {{ template "taiga.name" . }}
    release: {{ .Release.Name }}
- apiVersion: v1
  data:
    local.py: |
      # Please modify this file as needed, see the local.py.example for details:
      # https://github.com/taigaio/taiga-back/blob/master/settings/local.py.example
      #
      # Importing docker provides common settings, see:
      # https://github.com/benhutchins/docker-taiga/blob/master/docker-settings.py
      # https://github.com/taigaio/taiga-back/blob/master/settings/common.py
      from .docker import *

      PUBLIC_REGISTER_ENABLED = False
      DEBUG = False
      TEMPLATE_DEBUG = False

      ## Slack
      # https://github.com/taigaio/taiga-contrib-slack
      # INSTALLED_APPS += ["taiga_contrib_slack"]

      ## LDAP
      # see https://github.com/ensky/taiga-contrib-ldap-auth
      # INSTALLED_APPS += ["taiga_contrib_ldap_auth"]

      ## For additional configuration options, look at:
      # https://github.com/taigaio/taiga-back/blob/master/settings/local.py.example
  kind: ConfigMap
  metadata:
    name: taigalocal
    app: {{ template "taiga.name" . }}
    release: {{ .Release.Name }}
- apiVersion: v1
  data:
    celery.py: |
      # -*- coding: utf-8 -*-
      # Copyright (C) 2014-2017 Andrey Antukh <niwi@niwi.nz>
      # Copyright (C) 2014-2017 Jesús Espino <jespinog@gmail.com>
      # Copyright (C) 2014-2017 David Barragán <bameda@dbarragan.com>
      # Copyright (C) 2014-2017 Alejandro Alonso <alejandro.alonso@kaleidos.net>
      # This program is free software: you can redistribute it and/or modify
      # it under the terms of the GNU Affero General Public License as
      # published by the Free Software Foundation, either version 3 of the
      # License, or (at your option) any later version.
      #
      # This program is distributed in the hope that it will be useful,
      # but WITHOUT ANY WARRANTY; without even the implied warranty of
      # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      # GNU Affero General Public License for more details.
      #
      # You should have received a copy of the GNU Affero General Public License
      # along with this program.  If not, see <http://www.gnu.org/licenses/>.

      from kombu import Queue

      broker_url = 'amqp://guest:guest@rabbit:5672'
      result_backend = 'redis://redis:6379/0'

      accept_content = ['pickle',] # Values are 'pickle', 'json', 'msgpack' and 'yaml'
      task_serializer = "pickle"
      result_serializer = "pickle"

      timezone = 'Europe/Amsterdam'

      task_default_queue = 'tasks'
      task_queues = (
          Queue('tasks', routing_key='task.#'),
          Queue('transient', routing_key='transient.#', delivery_mode=1)
      )
      task_default_exchange = 'tasks'
      task_default_exchange_type = 'topic'
      task_default_routing_key = 'task.default'
  kind: ConfigMap
  metadata:
    name: celeryconfig
    app: {{ template "taiga.name" . }}
    release: {{ .Release.Name }}
- apiVersion: v1
  data:
    config.json: |
      {
          "url": "amqp://guest:guest@rabbit:5672",
          "secret": "mysecret",
          "webSocketServer": {
              "port": 80
          }
      }
  kind: ConfigMap
  metadata:
    name: eventsconfig
    app: {{ template "taiga.name" . }}
    release: {{ .Release.Name }}
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
